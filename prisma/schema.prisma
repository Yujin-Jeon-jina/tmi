// TMI 라포 형성 웹 서비스 데이터베이스 스키마

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 매치 정보
model Match {
  id            String   @id @default(cuid())
  teacherName   String
  teacherPhone  String
  studentName   String
  studentPhone  String
  status        String   @default("waiting") // waiting, teacher_completed, student_completed, both_completed
  pdfUrl        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  answers       Answer[]
  
  @@map("matches")
}

// 카테고리 (학생→선생님, 선생님→학생)
model Category {
  id          Int      @id @default(autoincrement())
  role        String   // 'teacher' | 'student'
  name        String
  description String?
  createdAt   DateTime @default(now())
  
  teachersQuestions TeachersQuestion[]
  studentsQuestions StudentsQuestion[]
  
  @@unique([role, name], name: "role_name")
  @@map("categories")
}

// 학생→선생님 질문
model TeachersQuestion {
  id           Int      @id @default(autoincrement())
  categoryId   Int
  questionText String
  tone         String?  @default("student_style")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  category     Category @relation(fields: [categoryId], references: [id])
  answers      Answer[] @relation("TeacherQuestionAnswers")
  
  @@unique([categoryId, questionText])
  @@map("teachers_questions")
}

// 선생님→학생 질문
model StudentsQuestion {
  id           Int      @id @default(autoincrement())
  categoryId   Int
  questionText String
  tone         String?  @default("teacher_style")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  category     Category @relation(fields: [categoryId], references: [id])
  answers      Answer[] @relation("StudentQuestionAnswers")
  
  @@unique([categoryId, questionText])
  @@map("students_questions")
}

// 답변 정보
model Answer {
  id                  Int      @id @default(autoincrement())
  matchId             String
  teachersQuestionId  Int?     // 학생→선생님 질문에 대한 답변일 때
  studentsQuestionId  Int?     // 선생님→학생 질문에 대한 답변일 때
  userType            String   // teacher 또는 student
  content             String
  createdAt           DateTime @default(now())
  
  match               Match             @relation(fields: [matchId], references: [id], onDelete: Cascade)
  teachersQuestion    TeachersQuestion? @relation("TeacherQuestionAnswers", fields: [teachersQuestionId], references: [id])
  studentsQuestion    StudentsQuestion? @relation("StudentQuestionAnswers", fields: [studentsQuestionId], references: [id])
  
  @@unique([matchId, teachersQuestionId, studentsQuestionId, userType])
  @@map("answers")
}

// 관리자 정보
model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  
  @@map("admins")
}